#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state") # ou
p2<-data.frame(a)
#
#filter(capitais, populacao > 500000, populacao < 1000000)
#data %>%
#group_by(city, deaths) %>%
#filter(state=="PE", city=="Recife") %>%
#summarise(soma=sum(VAL))
# plot_ly(labels = ~state,head
#values = ~count,
# marker = list(colors = mycolors)) %>%
# add_pie(hole = 0.2) %>%
# layout(xaxis = list(zeroline = F,
# showline = F,
#  showticklabels = F,
#  showgrid = F),
# yaxis = list(zeroline = F,
#    showline = F,
#   showticklabels=F,
#    showgrid=F))
p2
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state") # ou
p2<-data.frame(a)
plot(p2$date,p2$deaths)
#filter(capitais, populacao > 500000, populacao < 1000000)
#data %>%
#group_by(city, deaths) %>%
#filter(state=="PE", city=="Recife") %>%
#summarise(soma=sum(VAL))
# plot_ly(labels = ~state,head
#values = ~count,
# marker = list(colors = mycolors)) %>%
# add_pie(hole = 0.2) %>%
# layout(xaxis = list(zeroline = F,
# showline = F,
#  showticklabels = F,
#  showgrid = F),
# yaxis = list(zeroline = F,
#    showline = F,
#   showticklabels=F,
#    showgrid=F))
p2
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state") # ou
p2<-data.frame(a)
plot_ly(p2$date,p2$deaths)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state") # ou
p2<-data.frame(a)
plot(p2$date,p2$deaths, dotPlot())
#filter(capitais, populacao > 500000, populacao < 1000000)
#data %>%
#group_by(city, deaths) %>%
#filter(state=="PE", city=="Recife") %>%
#summarise(soma=sum(VAL))
# plot_ly(labels = ~state,head
#values = ~count,
# marker = list(colors = mycolors)) %>%
# add_pie(hole = 0.2) %>%
# layout(xaxis = list(zeroline = F,
# showline = F,
#  showticklabels = F,
#  showgrid = F),
# yaxis = list(zeroline = F,
#    showline = F,
#   showticklabels=F,
#    showgrid=F))
p2
valueBox(round(mean(data$city),
digits = 2),
icon = "fa-area-chart")
valueBox(round(mean(data$state),
digits = 2),
icon = "fa-area-chart")
valueBox(round(mean(data$confirmed),
digits = 2),
icon = "fa-area-chart")
valueBox(round(sum(data$confirmed),
digits = 2),
icon = "fa-area-chart")
valueBox(round(sum(data$confirmed),
digits = 2),
icon = "fa-area-chart")
valueBox(round(mean(data$deaths), digits = 2),
icon = "fa-area-chart")
valueBox(max(data$confirmed),
icon = "fa-user" )
max(data$confirmed
max(data$confirmed)
valueBox(max(data$confirmed),
icon = "fa-user" )
install.packages("valueBox")
valueBox(max(data$confirmed),
icon = "fa-user" )
valueBox(max(data$confirmed),
icon = "fa-user" )
library(valuebox)
library(valuebox)
install.packages("valueBox")
library(valuebox)
library(valuebox)
a<-(max(data$confirmed)
a<-max(data$confirmed)
a<-max(data$confirmed)
a<-max(data$confirmed)
a
b<-(sum(data$confirmed),
b<-(sum(data$confirmed),
b<-(sum(data$confirmed)
b<-(sum(data$deaths)
b
b<-sum(data$deaths)
b
c<-mean(data$deaths)
c
b<-sum(data$deaths)
plot(b)
b<-sum(data$deaths)
View(b)
b<-data.frame(sum(data$deaths))
b
c<-data.frame(mean(data$deaths))
c
a<-data.frame(max(data$confirmed))
a
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
#filter(capitais, populacao > 500000, populacao < 1000000)
#data %>%
#group_by(city, deaths) %>%
#filter(state=="PE", city=="Recife") %>%
#summarise(soma=sum(VAL))
# plot_ly(labels = ~state,head
#values = ~count,
# marker = list(colors = mycolors)) %>%
# add_pie(hole = 0.2) %>%
# layout(xaxis = list(zeroline = F,
# showline = F,
#  showticklabels = F,
#  showgrid = F),
# yaxis = list(zeroline = F,
#    showline = F,
#   showticklabels=F,
#    showgrid=F))
#p2
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
#filter(capitais, populacao > 500000, populacao < 1000000)
#data %>%
#group_by(city, deaths) %>%
#filter(state=="PE", city=="Recife") %>%
#summarise(soma=sum(VAL))
# plot_ly(labels = ~state,head
#values = ~count,
# marker = list(colors = mycolors)) %>%
# add_pie(hole = 0.2) %>%
# layout(xaxis = list(zeroline = F,
# showline = F,
#  showticklabels = F,
#  showgrid = F),
# yaxis = list(zeroline = F,
#    showline = F,
#   showticklabels=F,
#    showgrid=F))
p2
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
plot_mapbox(p2,date,deaths)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
plot_mapbox(p2,p2$date,p2$deaths)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
plot.ecdf(p2)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
normal_print(p2$deaths)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
norm(p2$deathstype = c("O", "I", "F", "M", "2"))
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
norm(p2$deaths)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
norm(p2$deaths, type = c("O", "I", "F", "M", "2"))
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
norm(p2$deaths, type = c("O", "I", "F", "M", "2"))
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
plot(p2$date,p2$deaths)
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
plot(p2$date,p2$deaths,method = "jitter")
# Carrega o pacote tidyr
library(tidyr)
# Reune as variaveis de ano espalhadas pela base 'homic'
#p2<- gather(data, state, deaths)
# Verifica as primeiras observacoes do novo banco
#head(p2)
# Reune variaveis espalhadas no banco homic
#p2
#p21 <- select(data, state, city, confirmed, deaths)
#p2<- gather(data = data, key = city, value = Recife,-date, -confirmed, -deaths)
# Visualiza o banco
#head(p2)
# Seleciona observacoes com populacao maior que 500 mil e menor que 1 milhao
a <-filter(data, place_type=="state",deaths>0)# ou
p2<-data.frame(a)
plot(p2$date,p2$deaths,method = "jitter",xlab(data),ylab(Mortes))
library(leaflet)
DF<-data.frame(DF)
#latitude=-8.064193
#longitude=-34.87815
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=-34.87815, lat=-8.064193, popup="The birthplace of R")
m
library(leaflet)
DF<-data.frame(DF)
#latitude=-8.064193
#longitude=-34.87815
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=-34.87815, lat=-8.064193, popup="origem")
m
cidades <- c("Recife PE","Paulista PE","Jaboatão dos Guararapes PE")
DF <- data.frame(cidade=cidades, lat=NA, lon=NA)
require(RgoogleMaps)
## Loading required package: RgoogleMaps
getGeoCode("Recife, Pernambuco, Brazil")
getGeoCode("Paulista, Pernambuco, Brazil")
getGeoCode("Jaboatão dos Guararapes Pernambuco, Brazil")
# Para várias cidades:
DF <- with(DF,data.frame(cidade=cidade, t(sapply(DF$cidade, getGeoCode))))
knitr::kable(DF, format="markdown", digits=4)
## Loading required package: plyr
library(plyr)
x<-ldply(DF$cidade, function(x) getGeoCode(x))
knitr::kable(
data.frame(cidade=cidades,x),
format="markdown",
digits=4)
library(leaflet)
library(geojson)
nycounties <- rgdal::readOGR("bairros.geojson")
#ies.geojson", layer: "nycounties
pal <- colorNumeric("viridis", NULL)
leaflet(nycounties) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 25,
fillColor = ~pal(bairro_codigo),
label = ~paste0(bairro_codigo, ": ", formatC(bairro_codigo, big.mark = ","))) %>%
addLegend(pal = pal, values = ~(bairro_codigo), opacity = 80.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
valueBox(paste("PERNAMBUCO"),
color = "warning")
valueBox(paste("PERNAMBUCO"),
color = "warning")
valueBox(sum(data$confirmed),
icon = "fa-user")
valueBox(sum(data$city == "Recife"),
icon = 'fa-building')
install.packages("valueBox")
library(valueBox)
install.packages("shinydashboard")
library(flexdashboard)
library(knitr)
library(DT)
library(rpivotTable)
library(ggplot2)
library(plotly)
library(dplyr)
library(openintro)
library(highcharter)
library(ggvis)
library(maps) #mapas simples, eixos, escala, cidades
library(mapdata) #base de dados WorldHires e rios
library(rworldmap) #outra base de dados de mapas do mundo
library(maptools) #Ler ESRI shapefiles
library(mapproj) #Projeções e grids
library(ggmap) #Gmaps, OSM + mapas baseados em ggplot2
library(rgdal)
library(shinydashboard)
### Leituras dos Dadoas
data <- read.csv("covid19-PE_09_04_2020.csv")
data<-data.frame(data)
### Cor das Telas
mycolors <- c("red", "#FFC125", "darkgreen", "darkorange")
valueBox(paste("PERNAMBUCO"),
color = "warning")
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
valueBox('10 * 2', "New Orders", icon = icon("credit-card"))
valueBox(10 * 2, "New Orders", icon = icon("credit-card"))
valueBox(paste("PERNAMBUCO"),
color = "warning")
install.packages("shinydashboardPlus")
### Leituras dos Dados
data <- read.csv("https://brasil.io/dataset/covid19/caso?format=csv")
### Leituras dos Dados
data <- read.csv("https://brasil.io/dataset/covid19/caso?format=csv")
### Leituras dos Dados
data <- read.csv("https://brasil.io/dataset/covid19/caso?format=csv")
data<-data.frame(data)
### Leituras dos Dados
data <- read.csv("https://brasil.io/dataset/covid19/caso?format=csv")
valueBox(paste("PERNAMBUCO"),
color = "warning")
valueBox(sum(data$confirmed),
icon = "fa-user")
library(shinydashboard)
valueBox(paste("PERNAMBUCO"),
color = "warning")
